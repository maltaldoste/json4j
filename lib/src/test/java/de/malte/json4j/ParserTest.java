/*
 * This source file was generated by the Gradle 'init' task
 */
package de.malte.json4j;

import org.junit.BeforeClass;
import org.junit.Test;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.Map;

import static org.junit.Assert.*;

public class ParserTest {
    private static JsonParser parser;

    @BeforeClass public static void initParser() {
        parser = new JsonParser();
    }

    @Test public void parseArray() {
        var expected = Arrays.asList(
            new JsonNull(),
            new JsonNumber(new BigDecimal("3.14")),
            new JsonString("hello, world!"),
            new JsonBoolean(false)
        );
        var source = "[null, 3.14, \"hello, world!\", false]";
        assertEquals(new JsonArray(expected), parser.parse(source));
    }

    @Test public void parseObject() {
        var expected = Map.of(
            "first", new JsonNull(),
            "2nd", new JsonNumber(new BigDecimal("123456789")),
            "another one", new JsonString("spaces are allowed in member keys")
        );
        var source = "{'first': null, '2nd': 123456789, 'another one': 'spaces are allowed in member keys'}"
            .replaceAll("'", "\"");
        assertEquals(new JsonObject(expected), parser.parse(source));
    }

    @Test public void parseBoolean() {
        assertEquals(new JsonBoolean(true), parser.parse("true"));
        assertEquals(new JsonBoolean(false), parser.parse("false"));
    }

    @Test public void parseString() {
        assertEquals(new JsonString("hello, world!"), parser.parse("\"hello, world!\""));
        // TODO: Test escape sequences
    }

    @Test public void parseNumber() {
        assertEquals(new JsonNumber(new BigDecimal("3.14")), parser.parse("3.14"));
        assertEquals(new JsonNumber(new BigDecimal("919191919191")), parser.parse("919191919191"));
        // TODO: Test exponents
    }

    @Test public void parseNull() {
        assertEquals(new JsonNull(), parser.parse("null"));
    }

    @Test public void parseNullSource() {
        assertThrows(NullPointerException.class, () -> parser.parse(null));
    }

    // TODO: tests for nested arrays and objects
}
