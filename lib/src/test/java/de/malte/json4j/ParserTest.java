/*
 * This source file was generated by the Gradle 'init' task
 */
package de.malte.json4j;

import org.junit.BeforeClass;
import org.junit.Test;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.Collections;
import java.util.Map;

import static org.junit.Assert.*;

public class ParserTest {
    private static JsonParser parser;

    @BeforeClass public static void initParser() {
        parser = new JsonParser(new JsonParserConfig());
    }

    @Test public void parseArray() {
        var expected = Arrays.asList(
            new JsonNull(),
            new JsonNumber(new BigDecimal("3.14")),
            new JsonString("hello, world!"),
            new JsonBoolean(false)
        );
        var source = "[null, 3.14, \"hello, world!\", false]";
        assertEquals(new JsonArray(expected), parser.parse(source));
    }

    @Test public void parseEmptyArray() {
        assertEquals(new JsonArray(Collections.emptyList()), parser.parse("[]"));
    }

    @Test public void parseObject() {
        var expected = Map.of(
            "first", new JsonNull(),
            "2nd", new JsonNumber(new BigDecimal("123456789")),
            "another one", new JsonString("spaces are allowed in member keys")
        );
        var source = "{'first': null, '2nd': 123456789, 'another one': 'spaces are allowed in member keys'}"
            .replaceAll("'", "\"");
        assertEquals(new JsonObject(expected), parser.parse(source));
    }

    @Test public void parseEmptyObject() {
        assertEquals(new JsonObject(Collections.emptyMap()), parser.parse("{}"));
    }

    @Test public void parseBoolean() {
        assertEquals(new JsonBoolean(true), parser.parse("true"));
        assertEquals(new JsonBoolean(false), parser.parse("false"));
    }

    @Test public void parseString() {
        assertEquals(new JsonString("hello, world!"), parser.parse("\"hello, world!\""));
        // TODO: Test escape sequences
    }

    @Test public void parseNumber() {
        assertEquals(new JsonNumber(new BigDecimal("3.14")), parser.parse("3.14"));
        assertEquals(new JsonNumber(new BigDecimal("919191919191")), parser.parse("919191919191"));
        // TODO: Test exponents
    }

    @Test public void parseNull() {
        assertEquals(new JsonNull(), parser.parse("null"));
    }

    @Test public void parseNullSource() {
        assertThrows(NullPointerException.class, () -> parser.parse(null));
    }

    @Test public void parseNestedArrays() {
        var expected = new JsonArray(Arrays.asList(
                new JsonArray(Arrays.asList(
                    new JsonArray(Arrays.asList(new JsonNull()))
                )),
            new JsonNumber(1),
            new JsonArray(Collections.emptyList())
        ));
        var jsonString = "[[[null]], 1, []]";
        assertEquals(expected, parser.parse(jsonString));
    }

    @Test public void parseNestedArraysWithWeirdWhitespace() {
        var expected = new JsonArray(Arrays.asList(
            new JsonArray(Arrays.asList(
                new JsonArray(Arrays.asList(new JsonNull()))
            )),
            new JsonNumber(1),
            new JsonArray(Collections.emptyList())
        ));
        var jsonString = "\t  [\n\n[                        [\n\t\t\nnull ]     ]\t\n\n\n\t,1,[\n\n\n\t\n\n    ]\n\t\t    \t\n]\n\n\t\t\n\n   ";
        assertEquals(expected, parser.parse(jsonString));
    }

    @Test public void parseNestedObjects() {
        var expected = new JsonObject(Map.of(
            "one", new JsonObject(Collections.emptyMap()),
            "2", new JsonObject(Map.of(
                "2.1", new JsonObject(Collections.emptyMap())
            ))
        ));
        var jsonString = "{'one': {}, '2': {'2.1': {}}}".replaceAll("'", "\"");
        assertEquals(expected, parser.parse(jsonString));
    }

    @Test public void parseNestedObjectsWithWeirdWhitespace() {
        var expected = new JsonObject(Map.of(
            "one", new JsonObject(Collections.emptyMap()),
            "2", new JsonObject(Map.of(
                "2.1", new JsonObject(Collections.emptyMap())
            ))
        ));
        var jsonString = "{\n\t'one'\t:\t{\t}\t,\n\t'2'\n\t:\t{\n\t\t'2.1'\t:   \n\t{\t}\n\t}\n}".replaceAll("'", "\"");
        assertEquals(expected, parser.parse(jsonString));
    }
}
